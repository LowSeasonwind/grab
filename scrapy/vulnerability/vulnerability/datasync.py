#coding=utf-8

import sys
import pymongo
import uuid
import redis
import re
import settings
import os
import exceptions
from items import BugItem, vulnerability

if sys.getdefaultencoding() != 'utf-8':
    reload(sys)
    sys.setdefaultencoding('utf-8')

# 数据同步，将cnnvd/cve/cnvd三个库里面的数据以cve为基准同步到vol库里


class Test(object):
    
    def __init__(self):
        self.client = pymongo.MongoClient(settings.MONGO_HOST,
                                          settings.MONGO_PORT)
        self.mongo_db = self.client[settings.MONGO_DB]
        self.cve_col = self.mongo_db[settings.MONGO_CVE_COL]
        self.cnvd_col = self.mongo_db[settings.MONGO_CNVD_COL]
        self.cnnvd_col = self.mongo_db[settings.MONGO_CNNVD_COL]
        self.vol = self.mongo_db[settings.MONGO_VOL_COL]
        self.redis = redis.Redis(host=settings.REDIS_HOST,port=
                                 settings.REDIS_PORT)
        self.sync_error = settings.REDIS_SYNC_ERROR_SET
        print '*************数据开始同步****************'

    def __del__(self):
        self.client.close()
        print '*************数据同步结束****************'

    def sync(self):
        count = 0
        error = 0
        list = self.cve_col.find({})
        #for i in self.redis.smembers(self.sync_error):
        #   list.append(self.cve_col.find_one({'vulnerability.cve':i}))
        for result in list:
            count+=1
            cve_id = result['vulnerability'].get('cve')
            if cve_id and not self.vol.find_one({'vulnerability.cve':cve_id}):
                print '----------开始同步%s---------'%cve_id
                try:
                    item = BugItem()
                    cnvd_item = self.cnvd_col.find_one({'vulnerability.cve':cve_id})
                    cnnvd_item = self.cnnvd_col.find_one({'vulnerability.cve':cve_id})
                    # kve目前为空
                    item['kve'] = None
                    # uuid1，时间戳
                    item['uuid'] = str(uuid.uuid1())
                    # is_ics根据cnvd判断
                    if cnvd_item and cnvd_item['is_ics']:
                        item['is_ics'] = True
                    else:
                        item['is_ics'] = False
                    # 漏洞基本信息
                    vul = vulnerability()
                    vul['cve'] = cve_id
                    # cve里面有可能包含cnnvd，所以先到cve里拿，其次到cnnvd拿，否则设置为None
                    if result['vulnerability'].get('cnnvd'):
                        vul['cnnvd'] = result['vulnerability'].get('cnnvd')
                    elif cnnvd_item:
                        vul['cnnvd'] = cnnvd_item['vulnerability'].get('cnnvd')
                    else:
                        vul['cnnvd'] = None
                    # cnvd_id只有cnvd里才有
                    if cnvd_item:
                        vul['cnvd'] = cnvd_item['vulnerability'].get('cnvd')
                    else:
                        vul['cnvd'] = None
                    # 漏洞类型，只有cnnvd有，以cnnvd为主,若无，则设置为‘其他’
                    if cnnvd_item and cnnvd_item['vulnerability'].get('vulType'):
                        vul['vulType'] = cnnvd_item['vulnerability'].get('vulType')
                    else:
                        vul['vulType'] = '其他'
                    # 漏洞名称 cnvd为主,cnnvd为辅
                    if cnvd_item and cnvd_item['vulnerability'].get('vulName'):
                        vul['vulName'] = cnvd_item['vulnerability'].get('vulName')
                    elif cnnvd_item and cnnvd_item['vulnerability'].get('vulName'):
                        vul['vulName'] = cnnvd_item['vulnerability'].get('vulName')
                    else:
                        vul['vulName'] = None
                    # 威胁类型 ，以cnnvd为主
                    if cnnvd_item:
                        vul['threadTypy'] = cnnvd_item['vulnerability'].get('threadTypy')
                    else:
                        vul['threadTypy'] = None
                    # 发布时间
                    releaseTime = result['vulnerability'].get('releaseTime')
                    if releaseTime:
                        if re.search('\d{4}-\d{2}-\d{2}',releaseTime):
                            vul['releaseTime']  = re.\
                                search('\d{4}-\d{2}-\d{2}',releaseTime).group()
                    elif cnvd_item and cnvd_item['vulnerability'].get('releaseTime'):
                        vul['releaseTime'] = cnvd_item['vulnerability'].get('releaseTime')
                    elif cnnvd_item and cnnvd_item['vulnerability'].get('releaseTime'):
                        vul['releaseTime'] = cnnvd_item['vulnerability'].get('releaseTime')
                    else:
                        vul['releaseTime'] = None
                    # 更新时间
                    updataTime = result['vulnerability'].get('updataTime')
                    if releaseTime:
                        if re.search('\d{4}-\d{2}-\d{2}', updataTime):
                            vul['updataTime'] = re. \
                                search('\d{4}-\d{2}-\d{2}', updataTime).group()
                    elif cnvd_item and cnvd_item['vulnerability'].get('updataTime'):
                        vul['updataTime'] = cnvd_item['vulnerability'].get('updataTime')
                    elif cnnvd_item and cnnvd_item['vulnerability'].get('updataTime'):
                        vul['updataTime'] = cnnvd_item['vulnerability'].get('updataTime')
                    else:
                        vul['updataTime'] = None
                    # 漏洞描述  cve/cnnvd/cnvd
                    if result['vulnerability'].get('vulDescription'):
                        vul['vulDescription'] = result['vulnerability'].get('vulDescription')
                    elif cnnvd_item and cnnvd_item['vulnerability'].get('vulDescription'):
                        vul['vulDescription'] = cnnvd_item['vulnerability'].get('vulDescription')
                    elif cnvd_item and cnvd_item['vulnerability'].get('vulDescription'):
                        vul['vulDescription'] = cnvd_item['vulnerability'].get('vulDescription')
                    else:
                        vul['vulDescription'] = None
                    # 安全建议
                    if cnnvd_item and cnnvd_item['vulnerability'].get('vulAdvisory'):
                        vul['vulAdvisory'] = cnnvd_item['vulnerability'].get('vulAdvisory')
                    elif cnvd_item and cnvd_item['vulnerability'].get('vulAdvisory'):
                        vul['vulAdvisory'] = cnvd_item['vulnerability'].get('vulAdvisory')
                    else:
                        vul['vulAdvisory'] = result['vulnerability'].get('vulAdvisory')
                    # 相关链接
                    if result['vulnerability'].get('refWebsite'):
                        vul['refWebsite'] =  result['vulnerability'].get('refWebsite')
                    elif cnvd_item and cnvd_item['vulnerability'].get('refWebsite'):
                        vul['refWebsite'] = cnvd_item['vulnerability'].get('refWebsite')
                    elif cnnvd_item and cnnvd_item['vulnerability'].get('refWebsite'):
                        vul['refWebsite'] = cnnvd_item['vulnerability'].get('refWebsite')
                    else:
                        vul['refWebsite'] = []
                    item['vulnerability'] = vul
                    # product
                    item['product'] = result['product']
                    if result['CVSS']:
                        item['CVSS'] = result['CVSS']
                    elif cnvd_item and cnvd_item['CVSS']:
                        item['CVSS'] = cnvd_item['CVSS']
                    else:
                        item['CVSS'] = None
                    if item['CVSS']:
                        cvss = item['CVSS']
                        level = cvss.get('riskLevel')
                        if '未评级' in level:
                            item['CVSS'] = None
                        else:
                            if not '' == cvss.get('cvssBaseScore'):
                                score = float(cvss.get('cvssBaseScore'))
                                if score==10.0:
                                    cvss['riskLevel'] = '危急'
                                elif score>=7.0:
                                    cvss['riskLevel'] = '高危'
                                elif score>=4.0:
                                    cvss['riskLevel'] = '中危'
                                else:
                                    cvss['riskLevel'] = '低危'
                                item['CVSS'] = cvss
                            else:
                                item['CVSS'] = None
                    if item['CVSS']:
                        cvss = item['CVSS']
                        score = cvss['cvssBaseScore']
                        confImpact = cvss['confImpact']
                        integImpact = cvss['integImpact']
                        availImpact = cvss['availImpact']
                        accessComplexity = cvss['accessComplexity']
                        accessVector = cvss['accessVector']
                        authentication = cvss['authentication']
                        if isinstance(score,unicode):
                            cvss['cvssBaseScore'] = float(score.strip())
                        if isinstance(confImpact,unicode):
                            cvss['confImpact'] = float(confImpact.strip())
                        if isinstance(availImpact, unicode):
                            cvss['availImpact'] = float(availImpact.strip())
                        if isinstance(integImpact, unicode):
                            cvss['integImpact'] = float(integImpact.strip())
                        if isinstance(accessComplexity, unicode):
                            cvss['accessComplexity'] = float(accessComplexity.strip())
                        if isinstance(accessVector,unicode):
                            cvss['accessVector'] = float(accessVector.strip())
                        if isinstance(authentication,unicode):
                            cvss['authentication'] = float(authentication.strip())
                        item['CVSS'] = cvss
                    self.vol.insert(dict(item))
                    print '----------同步成功%s---------' % cve_id
                except exceptions.Exception,ex:
                    log = os.getcwd() + os.path.sep + 'error.log'
                    with open(log,'a+') as f:
                        f.writelines(str(ex))
                    error+=1
                    self.redis.sadd(self.sync_error,cve_id)
                    print '---------同步出错%s---------'%cve_id
            else:
                print '----------%s已同步-----------'%cve_id
        print '######共同步%d条数据，%d条出错#####'%(count,error)


if __name__ == '__main__':
    print 'hahah'
    d = Test()
    d.sync()




