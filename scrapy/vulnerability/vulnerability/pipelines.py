# -*- coding: utf-8 -*-


import sys
import redis
import pymongo
from vulnerability.spiders.cnvdspider import cnvdspider
from vulnerability.spiders.cnnvdspider import cnnvdspider
from vulnerability.spiders.cvespider import cvespider
from vulnerability.spiders.icsspider import icsspider
from vulnerability.items import product, pro
if sys.getdefaultencoding() != 'utf-8':
    reload(sys)
    sys.setdefaultencoding = 'utf-8'


class VulPipline(object):

    def process_item(self, item, spider):
        if isinstance(spider,icsspider):
            cnvd = item['cnvd']
            self.cnvd.update({'vulnerability.cnvd':cnvd},{'$set':{'is_ics':True}})
            print '更新了cnvd:%s 为工控软件'%cnvd
        else:
            cve = item['vulnerability'].get('cve')
            cnnvd = item['vulnerability'].get('cnnvd')
            cnvd = item['vulnerability'].get('cnvd')
            # query for MongoDB
            query = {'vulnerability.cve':cve,'vulnerability.cnvd':cnvd,'vulnerability.cnnvd':cnnvd}
            products = item['product']
            item['product'] = self.parse_product(products)
            if isinstance(spider,cnvdspider):
               count = self.cnvd.find(query).count()
               if count>0:
                   print '该漏洞已经存在，cnvd: %s' %cnvd
               else:
                   self.cnvd.insert(dict(item))
            elif isinstance(spider,cnnvdspider):
                count = self.cnnvd.find(query).count()
                if count > 0:
                    print '该漏洞已经存在，cnnvd: %s' % cnnvd
                else:
                    self.cnnvd.insert(dict(item))
            elif isinstance(spider,cvespider):
                count = self.cve.find(query).count()
                print count
                if count > 0:
                    print '该漏洞已经存在，cve: %s' %cve
                else:
                    self.redis.sadd(self.redis_sset,cve) # 将cve存入redis是为了同步时使用
                    self.cve.insert(dict(item))
        return item

    @classmethod
    def from_crawler(cls,crawler):
        return cls(
            mongo_uri=crawler.settings.get('MONGO_HOST'),
            mongo_port=crawler.settings.get('MONGO_PORT'),
            mongo_db=crawler.settings.get('MONGO_DB'),
            mongo_col_cve=crawler.settings.get('MONGO_CVE_COL'),
            mongo_col_cnnvd=crawler.settings.get('MONGO_CNNVD_COL'),
            mongo_col_cnvd=crawler.settings.get('MONGO_CNVD_COL'),
            mongo_col_vol=crawler.settings.get('MONGO_VOL_COL'),
            redis_uri=crawler.settings.get('REDIS_HOST'),
            redis_port=crawler.settings.get('REDIS_PORT'),
            redis_sset=crawler.settings.get('REDIS_SET_NAME')
        )

    def __init__(self,mongo_uri,mongo_port,mongo_db,mongo_col_cve,
               mongo_col_cnnvd,mongo_col_cnvd,mongo_col_vol,redis_uri,
                 redis_port,redis_sset):
        self.mongo_uri = mongo_uri
        self.mongo_port = mongo_port
        self.mongo_db = mongo_db
        self.cve_col = mongo_col_cve
        self.cnvd_col = mongo_col_cnvd
        self.cnnvd_col = mongo_col_cnnvd
        self.vol_col = mongo_col_vol
        self.redis_uri = redis_uri
        self.redis_port = redis_port
        self.redis_sset = redis_sset

    def open_spider(self, spider):
        self.client = pymongo.MongoClient(self.mongo_uri, self.mongo_port)
        self.db = self.client[self.mongo_db]
        self.cve = self.db[self.cve_col]
        self.cnvd = self.db[self.cnvd_col]
        self.cnnvd = self.db[self.cnnvd_col]
        self.vol = self.db[self.vol_col]
        self.redis = redis.Redis(host=self.redis_uri,port=self.redis_port)

    def close_spider(self, spider):
        self.client.close()

    def parse_product(self, products):
        plist = []
        if products:
            vlist = []
            for i in products:
                vlist.append(i['vendor'])
            vset = set(vlist)
            for k in vset:
                duct = product()
                duct['vendor'] = k
                pros = []
                for j in products:
                    if j['vendor'] == k:
                        obj = pro()
                        obj['name'] = j['name']
                        obj['version'] = j['version']
                        obj['classify'] = j['classify']
                        obj['type'] = j['type']
                        pros.append(obj)
                duct['pro'] = pros
                plist.append(duct)
        return plist




