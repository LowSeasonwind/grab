#coding=utf-8

import sys
import uuid
import re
import exceptions
from scrapy.spiders import CrawlSpider, Rule
from scrapy.linkextractors.lxmlhtml import LxmlLinkExtractor
from scrapy.selector import Selector
from vulnerability.items import BugItem, CVSS, midpro, vulnerability
if sys.getdefaultencoding() != 'utf-8':
    reload(sys)
    sys.setdefaultencoding('utf-8')

# cnvd 国家信息安全漏洞共享平台


class cnvdspider(CrawlSpider):

    download_delay = 2
    name = 'cnvd'
    start_urls = ['http://www.cnvd.org.cn/flaw/list.htm?max=20&offset=0']
    #start_urls = ['http://www.cnvd.org.cn/flaw/list.htm?max=20&offset=3240']
    allowed_domains = ['www.cnvd.org.cn']

    rules = (Rule(LxmlLinkExtractor(allow=('flaw/list.htm\?',),
                restrict_xpaths=("//a[@class='nextLink']",))),
            Rule(LxmlLinkExtractor(allow=('/flaw/show/',),
                restrict_xpaths=("//table[@class='tlist']",)),
                 follow=True,callback='parse_item'))

    def parse_item(self,response):
        sel = Selector(response)
        item = BugItem()
        vol = vulnerability()
        cvss = CVSS()
        try:
            sites = sel.xpath("//table[@class='gg_detail']/tbody/tr")
            title = sel.xpath("//div[@class='blkContainerSblk']/h1/text()").extract()[0].strip() #漏洞名称
            vol['vulName'] = title
            vol['cnnvd'] = None  # 该网站没有cnnvd
            vol['vulType'] = None  #
            vol['cnvd'] = ''.join(sites[0].xpath("td[2]/text()").extract()).strip()
            vol['releaseTime'] = ''.join(sites[1].xpath("td[2]/text()").extract()).strip()
            vol['updataTime'] = ''.join(sites[-3].xpath("td[2]/text()").extract()).strip()
            vol['threadTypy'] = None
            vol['vulAdvisory'] = sites[-9].xpath("td[2]/text()").extract()
            vol['refWebsite'] = sites[-10].xpath("td[2]/a/text()").extract()
            vol['vulDescription'] = ''.join(sites[-11].xpath("td[2]/text()").extract()).strip()
            has_cve = ''.join(sites[4].xpath("td[1]/text()").extract()).strip()

            #  这是一个坑，有的漏洞没有cve，不处理后续的都会错行
            #  http://www.cnvd.org.cn/flaw/show/CNVD-2015-08173  有BugTRAQ ID的例子，镇坑

            if 'BUGTRAQ ID' in has_cve:
                next = ''.join(sites[5].xpath("td[1]/text()").extract()).strip()
                if 'CVE ID' in next:
                    vol['cve'] = ''.join(sites[5].xpath("td[2]/a/text()").extract()).strip()
                else:
                    vol['cve'] = None
            elif 'CVE ID' in has_cve:
                vol['cve'] = ''.join(sites[4].xpath("td[2]/a/text()").extract()).strip()
            else:
                vol['cve'] = None

            item['vulnerability'] = vol

            # vol结束

            cvss['cvssBaseScore'] = ''.join(sel.xpath("//div[@id='showDiv']/div/text()").re("\d+\.?\d?"))
            cvss['riskLevel'] = ''.join(sites[2].xpath("td[2]/text()").extract()).replace('(','')\
                .replace(')','').strip()
            text = ''.join(sel.xpath("//a[@class='showInfo']/text()").extract())
            params = {}
            if text:
                for i in text.split('/'):
                    y = i.split(':')
                    if y:
                        params[y[0]] = y[1]
            if params:
                self.swift(cvss=cvss,dicts=params)
            item['CVSS'] = cvss

            # cvss结束

            products = []
            list = sites[3].xpath("td[2]/text()").extract()
            for line in list:
                if line.strip() and not '暂无' in line:
                    values = line.split(' ')
                    if values:
                        obj = midpro()
                        obj['vendor'] = values[0].strip()
                        if re.search('\d+',values[-1]):
                            obj['name'] = ' '.join(values[1:-1])
                            obj['version'] = values[-1]
                        else:
                            obj['name'] = ' '.join(values[1:])
                            obj['version'] = None
                        obj['classify'] = None
                        obj['type'] = None
                        products.append(obj)
            item['product'] = products
            item['uuid'] = str(uuid.uuid1())
            item['kve'] = None
            item['is_ics'] = None
            yield item
        except exceptions:
            print '出错了，url:%s' %response.url

    def swift(self, cvss, dicts):
        for (k, v) in dicts.items():
            if k == 'C':
                if v == 'N':
                    cvss['confImpact'] = 0
                elif v == 'P':
                    cvss['confImpact'] = 0.275
                elif v == 'C':
                    cvss['confImpact'] = 0.66
            elif k == 'I':
                if v == 'N':
                    cvss['integImpact'] = 0
                elif v == 'P':
                    cvss['integImpact'] = 0.275
                elif v == 'C':
                    cvss['integImpact'] = 0.66
            elif k == 'A':
                if v == 'N':
                    cvss['availImpact'] = 0
                elif v == 'P':
                    cvss['availImpact'] = 0.275
                elif v == 'C':
                    cvss['availImpact'] = 0.66
            elif k == 'AV':
                if v == 'L':
                    cvss['accessVector'] = 0.395
                elif v == 'A':
                    cvss['accessVector'] = 0.646
                elif v == 'N':
                    cvss['accessVector'] = 1
            elif k == 'AC':
                if v == 'H':
                    cvss['accessComplexity'] = 0.35
                elif v == 'M':
                    cvss['accessComplexity'] = 0.61
                elif v == 'L':
                    cvss['accessComplexity'] = 0.71
            elif k == 'AU':
                if v == 'M':
                    cvss['authentication'] = 0.45
                elif v == 'S':
                    cvss['authentication'] = 0.56
                elif v == 'N':
                    cvss['authentication'] = 0.704















