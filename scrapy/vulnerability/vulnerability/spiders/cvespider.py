#coding=utf-8

import sys
import uuid
import exceptions
from scrapy.spiders import CrawlSpider, Rule
from scrapy.linkextractors.lxmlhtml import LxmlLinkExtractor
from scrapy.selector import Selector
from vulnerability.items import *
if sys.getdefaultencoding() != 'utf-8':
    reload(sys)
    sys.setdefaultencoding('utf-8')

# cve SCAP  安全内容自动化协议中文社区

class cvespider(CrawlSpider):

    download_delay = 3
    name = 'cve'
    # 11470  6090
    start_urls = ['http://cve.scap.org.cn/cve_list.php?p=6090']
    allowed_domains = ['cve.scap.org.cn']

    rules = (Rule(LxmlLinkExtractor(allow=('cve_list.php\?&p=\d+',),
                restrict_xpaths=("//span[@class='butons']/a[text()=\'"+u'下一页'+"\']",))),
             Rule(LxmlLinkExtractor(allow=('cve.scap.org.cn/CVE-\d+-\d+',),
                restrict_xpaths=("//div[@class='entry']/h2/span",)),callback='parse_item')
             )

    def parse_item(self,response):
        try:
            sel = Selector(response)
            item = BugItem()
            vol = vulnerability()
            vol['vulName'] = None
            vol['vulType'] = None
            vol['threadTypy'] = None
            vol['releaseTime'] = sel.xpath("//span[@class='cve_id']/../../../tr[1]/td[3]/text()").\
                re("\\d{4}-\\d{2}-\\d{2}\\s*\\d{2}:\\d{2}:\\d{2}")[0]
            vol['updataTime'] = sel.xpath("//span[@class='cve_id']/../../../tr[2]/td[1]/text()").\
                re("\\d{4}-\\d{2}-\\d{2}\\s*\\d{2}:\\d{2}:\\d{2}")[0]
            vol['vulAdvisory'] = sel.xpath("//table[@id='officialref']/tr/td/a/@href").extract()
            vol['refWebsite'] = sel.xpath("//table[@id='reference']/tr/td/a/@href").extract()
            vol['vulDescription'] = ''.join(sel.xpath("//div[@class='summary']/p[1]/text()").extract())
            vol['cve'] = ''.join(sel.xpath("//span[@class='cve_id']/text()").extract())
            cnnvd = ''.join(sel.xpath("//div[@class='summary']/p[2]/text()").extract())
            vol['cnnvd'] = ''.join(sel.xpath("//div[@class='summary']/p[2]/a/text()").extract())\
                    if 'CNNVD数据暂缺。' not in cnnvd else None
            vol['cnvd'] = None
            item['vulnerability'] = vol

            # vol

            if not 'CVSS暂不可用' in sel.xpath("//table[@id='cvss']/tr/td/text()").extract():
                cvss = CVSS()
                cvss['cvssBaseScore'] = ''.join(sel.xpath("//table[@id='cvss']/\
                    tr[1]/td[2]/text()").extract())
                cvss['riskLevel'] = ''.join(sel.xpath("//table[@id='cvss']/\
                    tr[1]/td[3]/text()").extract())
                cvss['confImpact'] = self.swift(''.join(sel.xpath("//table[@id='cvss']/\
                    tr[2]/td[1]/text()").extract()),''.join(sel.xpath("//table[@id='cvss']/\
                    tr[2]/td[2]/text()").extract()))
                cvss['integImpact'] = self.swift(''.join(sel.xpath("//table[@id='cvss']/\
                    tr[3]/td[1]/text()").extract()), ''.join(sel.xpath("//table[@id='cvss']/\
                    tr[3]/td[2]/text()").extract()))
                cvss['availImpact'] = self.swift(''.join(sel.xpath("//table[@id='cvss']/\
                    tr[4]/td[1]/text()").extract()), ''.join(sel.xpath("//table[@id='cvss']/\
                    tr[4]/td[2]/text()").extract()))
                cvss['accessComplexity'] = self.swift(''.join(sel.xpath("//table[@id='cvss']/\
                    tr[5]/td[1]/text()").extract()), ''.join(sel.xpath("//table[@id='cvss']/\
                    tr[5]/td[2]/text()").extract()))
                cvss['accessVector'] = self.swift(''.join(sel.xpath("//table[@id='cvss']/\
                    tr[6]/td[1]/text()").extract()), ''.join(sel.xpath("//table[@id='cvss']/\
                    tr[6]/td[2]/text()").extract()))
                cvss['authentication'] = self.swift(''.join(sel.xpath("//table[@id='cvss']/\
                    tr[7]/td[1]/text()").extract()), ''.join(sel.xpath("//table[@id='cvss']/\
                    tr[7]/td[2]/text()").extract()))
                item['CVSS'] = cvss
            else:
                item['CVSS'] = None

            # cvss

            products = []
            if not '产品及版本信息(CPE)暂不可用' in sel.\
                    xpath("//table[@id='cpe']/tr/td/text()").extract():
                links = sel.xpath("//table[@id='cpe']/tr/td[1]/text()").extract()
                for link in links:
                    pros = midpro()
                    lines = link.split(':')
                    if lines:
                        pros['vendor'] = lines[2]
                        pros['name'] = lines[3]
                        if len(lines) > 4:
                            pros['version'] = lines[4]
                        else:
                            pros['version'] = None
                        pros['classify'] = lines[1].replace('/',' ').strip()  # 'a' or 'h' or 'o'
                        pros['type'] = None
                        products.append(pros)
            item['product'] = products
            item['uuid'] = str(uuid.uuid1())
            item['is_ics'] = None
            item['kve'] = None
            yield item
        except exceptions:
            print '出错了，url:%s' % response.url

    def swift(self, title, value):
        value = value.upper().strip()
        if title == '机密性影响:' or title == '完整性影响:' or title == '可用性影响:':
            if 'COMPLETE' in value:
                return '0.66'
            elif 'PARTIAL' in value:
                return '0.275'
            elif 'NONE' in value:
                return '0'
            else:
                return None
        elif title == '攻击向量:':
            if 'LOCAL' in value:
                return '0.395'
            elif value == 'Adjacent Network'.upper() or value == 'Adjacent_Network'.upper():
                return '0.646'
            elif value == 'NETWORK':
                return '1'
            else:
                return None
        elif title == '攻击复杂度:':
            if value == 'High'.upper():
                return '0.35'
            elif value == 'Medium'.upper():
                return '0.61'
            elif value == 'Low'.upper():
                return '0.71'
            else:
                return None
        elif title == '身份认证:':
            if 'Multiple'.upper() in value:
                return '0.45'
            elif 'Single'.upper() in value:
                return '0.56'
            elif value == 'None'.upper():
                return '0.704'
            else:
                return None



